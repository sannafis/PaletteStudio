@page "/studiomockup"
@inject IPaletteService paletteService
@inject NavigationManager navManager
@inject IJSRuntime JS

@if (!response.Success)
{
    <div class="alert alert-danger">
        <p>@response.Message</p>
    </div>
}

@if (Palette == null)
{
    <div class="alert alert-info">
        Loading Palette Studio...
    </div>
}
else
{
    <EditForm Model=@Palette OnValidSubmit=@Submit>
        <DataAnnotationsValidator />
        <ValidationSummary />




        <div class="d-flex justify-content-between">
            <button @onclick=@Back class="input-group-text btn btn-primary" type="button" data-toggle="tooltip" data-placement="bottom" title="Changes will not be saved."><i class="fa-solid fa-chevron-left"></i><span>Back</span></button>
            <div class="d-flex justify-content-between">
                <button data-toggle="tooltip" data-placement="top" title="The name of your palette is only visible to you and will NOT be shown to others if it is public." class="help-btn circle input-group-text btn btn-primary btn-close-white border border-2" type="button"><i class="fa-solid fa-question"></i></button>

                <label class="col-sm-2 col-form-label" for="name">Name:</label>
                <input @bind-value=@Palette.Name type="text" name="name" class="form-control" id="name" placeholder="Ex: Cool Palette">
                <button class="input-group-text btn btn-primary" type="submit"><i class="fa-solid fa-floppy-disk"></i><span>Save</span></button>
            </div>
        </div>



        @* ******** COLOUR GROUP EDITOR WINDOW ******** *@

        <div class="d-flex flex-column flex-md-row p-0 m-0 w-100 shadow-lg w-100 " style="left:0;height:calc(100% - 120px);bottom:0 ;position:absolute">

            @if (true@* IsEditExpanded && CurrentlyEditing != null*@)
            {
                <div style="@(IsEditExpanded? "flex:1;" : "flex:0.0000001;")" id="editor" class="editor-collapsed hide position-relative border-end border-bottom border-1 border-dark">

                    <div>
                        <button id="closeButton" @onclick=@CloseEditWindow type="button" class="toggle-window btn btn-outline-secondary position-absolute end-0 circle border-2 m-3 float-end"><i class="fa-solid fa-x"></i></button>
                    </div>
                    <div class=" d-flex flex-wrap flex-column h-100">
                        <div class="flex-grow-1 d-flex flex-wrap flex-column-reverse p-0" style="background-color:@CurrentlyEditing!.BackgroundColourHexCode;"></div>

                        @{
                            string colourHex = CurrentlyEditing.BackgroundColourHexCode;
                        }

                        <button id=@($"Hex{CurrentlyEditing.Id}") @onclick=@(()=>ColourHexClick(buttonId:$"Hex{CurrentlyEditing!.Id}",colour:colourHex, background:CurrentlyEditing)) type="button" class="hover-trans-white btn btn-outline-light border-0 pr-3 position-absolute top-0" style="left: 43%;text-align:right; padding:10px;">
                            <DynamicText Text=@CurrentlyEditing.BackgroundColourHexCode!.ToUpper() ComparisonColour=@($"{CurrentlyEditing.BackgroundColourHexCode}") />
                        </button>

                        @if (CurrentlyEditing!.ForegroundColours.Count > 0)
                        {
                            <button id="btnToggleSubColours" @onclick=ToggleSubColoursWindow type="button" class="btn btn-outline-secondary  border-2 position-absolute pt-0 pb-0 @(IsEditColoursExpanded? "bottom-55" : "bottom-0")" style="left: 46%;">
                                @if (IsEditColoursExpanded)
                                {
                                    <i class="fa-solid fa-chevron-down"></i>
                                }
                                else
                                {
                                    <i class="fa-solid fa-chevron-up"></i>
                                }
                            </button>

                            @if (true)
                            {
                                <div id="subColourPanel" class="flex-wrap d-flex flex-row " style="max-height:100%; @(IsEditColoursExpanded? "flex:1;" : "flex:0.000001;")">

                                    @foreach (var subColour in CurrentlyEditing!.ForegroundColours)
                                    {
                                        <div class="flex-grow-1" style="background-color:@subColour!.ColourHexCode;">
                                            <button id=@($"SubHex{subColour!.Id}") @onclick=@(()=>ColourHexClick($"SubHex{subColour.Id}", subColour.ColourHexCode, foreground:subColour)) type="button" class="hover-trans-white btn btn-outline-light border-0 pr-3 @(IsEditColoursExpanded? "":"d-none")" style="padding:10px;">
                                                <DynamicText Text=@subColour!.ColourHexCode!.ToUpper() ComparisonColour=@subColour!.ColourHexCode />
                                            </button>
                                        </div>


                                    }
                                </div>
                            }
                        }
                    </div>


                </div>
            }


            @* ******** FULL PALETTE VIEW ******** *@

            <div id="palette" style="flex:1;max-width:10000px">



                <div class="palette-view" style="height:100%">
                    <div class=" d-flex flex-nowrap @paletteOrientCurrent p-0 h-100">


                        @foreach (var mainColour in Palette.ColourGroups)
                        {
                            <div @onclick=@(()=>OpenEditWindow(mainColour)) class="position-relative hover colour-group toggle-window cursor-pointer pe-auto flex-grow-1 d-flex flex-wrap @colourGroupOrientCurrent h-100 @(CurrentlyEditing == mainColour? "border-dotted border-5 border-info border-dotted": "")">
                                <div class="flex-grow-1 d-flex flex-wrap flex-column-reverse" style="background-color:@mainColour.BackgroundColourHexCode;"></div>
                                <div class="flex-grow-1 flex-wrap d-flex @subColourOrientCurrent" style="max-height:100%;">

                                    @foreach (var subColour in mainColour.ForegroundColours)
                                    {
                                        <div class="flex-grow-1" style="background-color:@subColour.ColourHexCode;"></div>
                                    }
                                </div>

                                @{
                                    var colourValue = Colour.ToHSVFromHex(mainColour.BackgroundColourHexCode).V;
                                }
                                <div class="shadow-inset hover-effect position-absolute h-100 w-100 @(colourValue >= .50? "shadow-inset-grey": "shadow-inset-white")"></div>
                            </div>
                        }
                    </div>
                </div>

            </div>

        </div>

        <style>
            .hover:hover > .hover-effect {
                filter: alpha(opacity=1);
                opacity: 1;
            }

            .hover-effect {
                background-color: transparent;
                filter: alpha(opacity=0);
                opacity: 0;
                transition: all 0.4s;
            }

            .shadow-inset-grey {
                box-shadow: inset 0px 0px 5px 4px rgba(105, 70, 74,0.5),inset -4px -4px 10px -4px rgba(105, 70, 74,0.5);
                mix-blend-mode: multiply;
                -moz-box-shadow: inset 0px 0px 5px 4px rgba(105, 70, 74,0.5),inset -4px -4px 10px -4px rgba(105, 70, 74,0.5);
                -webkit-box-shadow: inset 0px 0px 5px 4px rgba(105, 70, 74,0.5),inset -4px -4px 10px -4px rgba(105, 70, 74,0.5);
            }

            .shadow-inset-white {
                box-shadow: inset 0px 0px 5px 4px rgba(255,255,255,0.5),inset 4px 4px 10px 0px rgba(255,255,255,0.3);
                mix-blend-mode: normal;
                -moz-box-shadow: inset 0px 0px 5px 4px rgba(255,255,255,0.5),inset 4px 4px 10px 0px rgba(255,255,255,0.3);
                -webkit-box-shadow: inset 0px 0px 5px 4px rgba(255,255,255,0.5),inset 4px 4px 10px 0px rgba(255,255,255,0.3);
            }
        </style>


    </EditForm>

    <p>
        Current: @(CurrentlyEditing!.BackgroundColourHexCode)

        Colour: @(SelectedColour)
        |
        Foreground Colour: @(SelectedForegroundColour)
        |
        Background Colour: @(SelectedBackgroundColour) |
    </p>
}


<div class="@colourPickerClass" @onclick=@HideColourPicker style="position:fixed;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    background: rgba(0,0,0,0);">
</div>
<div class="@colourPickerClass shadow bg-white p-3 rounded-3 position-absolute" style="z-index:1000;top:@(hexButtonCoords["Y"]+50+"px"); left:@(hexButtonCoords["X"]-75+"px")">

    <div style="margin-left:85px;margin-top:-30px; border-bottom: calc(0.866 * 30px) solid white;
  border-left: calc(30px / 2) solid transparent;
  border-right: calc(30px / 2) solid transparent;
  border-top: 0;
  height: 0;
  width: 0;"></div>
</div>

<div class="@colourPickerClass shadow bg-white p-3 rounded-3 position-absolute" style="z-index:1000;top:@(colourpickerCoords["Y"]+"px"); left:@(colourpickerCoords["X"]+"px")">

    <ColourPicker @ref=@ColourPicker ShouldReRender="ShouldRender" WidthPx=@(colourpickerWidth.ToString()) ColourToEdit=@(SelectedColour) CurrentColour=@(SelectedColour == null? new ColourDto{HexCode="#ff0000"}: SelectedColour) OnClickCallback=@ChangeColour />
</div>

@code {
    [Parameter]
    public int Id { get; set; } = 3;

    private PaletteReadOnlyDto? Palette { get; set; }

    Response<PaletteReadOnlyDto> response = new Response<PaletteReadOnlyDto>();
    Response<bool> responseSubmit = new Response<bool> { Success = true };

    private int colourpickerWidth = 200;


    // properties for changing between different css classes dynamically
    private string paletteOrientCurrent { get; set; } = paletteOrientNorm;
    private string colourGroupOrientCurrent { get; set; } = colourGroupOrientNorm;
    private string subColourOrientCurrent { get; set; } = subColourOrientNorm;

    // constants for normal orientation of elements
    private const string paletteOrientNorm = "flex-column flex-md-row";
    private const string colourGroupOrientNorm = "flex-row flex-md-column";
    private const string subColourOrientNorm = "flex-md-row flex-column-reverse";

    // constants for orientation of elements when Edit Window is expanded
    private const string paletteOrientExp = "flex-row flex-md-column";
    private const string colourGroupOrientExp = "flex-column flex-md-row";
    private const string subColourOrientExp = "flex-md-column flex-row-reverse";

    private bool IsEditExpanded { get; set; } = false;

    private bool IsEditColoursExpanded { get; set; } = false;

    ColourGroupReadOnlyDto? CurrentlyEditing { get; set; }

    private ColourDto? SelectedColour { get; set; }
    private ColourGroupReadOnlyDto? SelectedBackgroundColour { get; set; }
    private ForegroundColourReadOnlyDto? SelectedForegroundColour { get; set; }

    private ColourPicker ColourPicker { get; set; } = new ColourPicker();

    private ColourGroupReadOnlyDto DefaultColourGroup = new ColourGroupReadOnlyDto { BackgroundColourHexCode = "#000000" };


    private void ChangeColour()
    {
        if (SelectedColour != null && null != ColourPicker)
        {
            if (SelectedBackgroundColour != null)
            {
                SelectedBackgroundColour.BackgroundColourHexCode = ColourPicker.CurrentColour.HexCode;
            }
            else if (SelectedForegroundColour != null)
            {
                SelectedForegroundColour.ColourHexCode = ColourPicker.CurrentColour.HexCode;
            }

            SelectedColour.HexCode = ColourPicker.CurrentColour.HexCode;
        }
    }

    private async Task OpenEditWindow(ColourGroupReadOnlyDto colourGroup)
    {
        paletteOrientCurrent = paletteOrientExp;
        colourGroupOrientCurrent = colourGroupOrientExp;
        subColourOrientCurrent = subColourOrientExp;
        CurrentlyEditing = colourGroup;
        IsEditExpanded = true;

        //await JS.InvokeVoidAsync("layout");
        //await JS.InvokeVoidAsync("setupAnimations");
    }
    private async Task CloseEditWindow()
    {
        IsEditExpanded = false;
        paletteOrientCurrent = paletteOrientNorm;
        colourGroupOrientCurrent = colourGroupOrientNorm;
        subColourOrientCurrent = subColourOrientNorm;
        CurrentlyEditing = DefaultColourGroup;
        //await JS.InvokeVoidAsync("layout");
    }

    private void ToggleSubColoursWindow()
    {
        IsEditColoursExpanded = !IsEditColoursExpanded;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setClickEvents");
            Console.WriteLine("setup complete");


        }

        await JS.InvokeVoidAsync("setClickEvents");

    }

    protected override async Task OnInitializedAsync()
    {
        response = await paletteService.GetPalette(Id);
        if (response.Success)
        {
            Palette = response.Data;
        }
        CurrentlyEditing = DefaultColourGroup;

        foreach (ColourGroupReadOnlyDto cg in Palette.ColourGroups)
        {
            await JS.InvokeVoidAsync("alert", $"{cg.BackgroundColourHexCode}");
            foreach (ForegroundColourReadOnlyDto f in cg.ForegroundColours)
            {
                await JS.InvokeVoidAsync("alert", $"{f.ColourHexCode}");
            }
        }

    }

    private async Task Submit()
    {
        responseSubmit = await paletteService.UpdatePalette(Palette!.Id, Palette);
        if (responseSubmit.Success)
        {
            await JS.InvokeVoidAsync("alert", $"Saved");
        }
    }
    private void Back()
    {
        navManager.NavigateTo("/palettes");
    }

    private Dictionary<string, double> hexButtonCoords = new Dictionary<string, double>() { { "X", 0.0 }, { "Y", 0.0 } };
    private Dictionary<string, double> colourpickerCoords = new Dictionary<string, double>() { { "X", 0.0 }, { "Y", 0.0 } };
    private string colourPickerClass = " invisible ";

    private async Task ColourHexClick(string buttonId, string colour, ColourGroupReadOnlyDto? background = null, ForegroundColourReadOnlyDto? foreground = null)
    {
        await HideColourPicker();
        hexButtonCoords = await JS.InvokeAsync<Dictionary<string, double>>("getButtonCoords", $"{buttonId}");

        colourpickerCoords["X"] = hexButtonCoords["X"] - 75;
        colourpickerCoords["Y"] = hexButtonCoords["Y"] + 50;

        
        await SetCurrentColour(background, foreground, colour);

        await ShowColourPicker();

        var window = await JS.InvokeAsync<Dimension>("getWindowDimensions");
       
        // left side of screen (X)
        if (hexButtonCoords["X"] < colourpickerWidth / 2)
        {
            colourpickerCoords["X"] = 0;
        }
        // right side of screen (X)
        if (hexButtonCoords["X"] > window.Width - colourpickerWidth)
        {
            colourpickerCoords["X"] = window.Width - colourpickerWidth;
        }
        // bottom of screen (Y)
        //var colourPicker = await JS.InvokeAsync<Dimension>("MyDOMGetBoundingClientRect", ColourPicker);

        //if (hexButtonCoords["Y"] > window.Height - colourPicker.Height)
        //{
        //    colourpickerCoords["Y"] = hexButtonCoords["Y"];
        //}

    }

    private async Task SetCurrentColour(ColourGroupReadOnlyDto? bg, ForegroundColourReadOnlyDto? fg, string colour)
    {
        await JS.InvokeVoidAsync("alert", $"{colour}");

        if (bg != null)
        {
            SelectedBackgroundColour = bg;
            SelectedForegroundColour = null;
        }
        else
        {
            SelectedBackgroundColour = null;
            SelectedForegroundColour = fg;
        }
        SelectedColour = new ColourDto { HexCode = colour };
    }

    private async Task HideColourPicker()
    {
        colourPickerClass = " invisible ";
        SelectedBackgroundColour = null;
        SelectedForegroundColour = null;
        SelectedColour = null;
    }
    private async Task ShowColourPicker()
    {

        if (SelectedColour != null)
        {
            ColourPicker!.Hue = SelectedColour.HSV.H;
            ColourPicker!.Saturation = SelectedColour.HSV.S;
            ColourPicker!.Value = SelectedColour.HSV.V;
        }


        StateHasChanged();
        await ColourPicker!.SetColourPicker();
        colourPickerClass = " visible ";







    }
}
