// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PaletteStudioApi.Data;

#nullable disable

namespace PaletteStudioApi.Data.PaletteStudioMigrations
{
    [DbContext(typeof(PaletteStudioDbContext))]
    partial class PaletteStudioDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.16");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "608616ab-2cb2-4823-9021-b11452f80986",
                            ConcurrencyStamp = "6e22e3f8-bb05-462e-acf1-4522eb226e53",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "0e97e6f5-e05f-43fd-b33f-bdb6ff465658",
                            ConcurrencyStamp = "9faab77f-5aa8-4d18-9691-266c3aec6ad3",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "354492fe-30eb-4261-b5b1-4a291cb4001d",
                            RoleId = "608616ab-2cb2-4823-9021-b11452f80986"
                        },
                        new
                        {
                            UserId = "dc3fbe21-8f2a-4ac3-9516-91957919b028",
                            RoleId = "0e97e6f5-e05f-43fd-b33f-bdb6ff465658"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PaletteStudioApi.Models.Authentication.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nickname")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "dc3fbe21-8f2a-4ac3-9516-91957919b028",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e4eb65f5-21f0-435e-baee-c335a1f9e3a7",
                            Email = "admin@palettestudio.ca",
                            EmailConfirmed = true,
                            FirstName = "Palette Studio",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            Nickname = "Admin",
                            NormalizedEmail = "ADMIN@PALETTESTUDIO.CA",
                            NormalizedUserName = "ADMIN@PALETTESTUDIO.CA",
                            PasswordHash = "AQAAAAEAACcQAAAAEPOguBI1oNotTAorFqt+LUoM40pieunhExEnCGIbVLLoGvGQjKctckM7V6vxY4gdZA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ce111549-771f-4a90-9647-bf43c73e222b",
                            TwoFactorEnabled = false,
                            UserName = "admin@palettestudio.ca"
                        },
                        new
                        {
                            Id = "354492fe-30eb-4261-b5b1-4a291cb4001d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a8c91896-886f-4d0c-a4eb-51de83fcfd90",
                            Email = "user@palettestudio.ca",
                            EmailConfirmed = true,
                            FirstName = "Palette Studio",
                            LastName = "User",
                            LockoutEnabled = false,
                            Nickname = "Test User",
                            NormalizedEmail = "USER@PALETTESTUDIO.CA",
                            NormalizedUserName = "USER@PALETTESTUDIO.CA",
                            PasswordHash = "AQAAAAEAACcQAAAAEApvd943UGqbyvc3JgFd+uKNO7c8uMlgrV/9RLgg90OWx7hBPq2xuXWGb7ugapd8HA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "07ea4d9b-7fd5-4fbb-b38e-fcd5133b494b",
                            TwoFactorEnabled = false,
                            UserName = "user@palettestudio.ca"
                        });
                });

            modelBuilder.Entity("PaletteStudioApi.Models.Colour", b =>
                {
                    b.Property<string>("HexCode")
                        .HasColumnType("TEXT");

                    b.HasKey("HexCode");

                    b.ToTable("Colours");

                    b.HasData(
                        new
                        {
                            HexCode = "#000000"
                        },
                        new
                        {
                            HexCode = "#FFFFFF"
                        },
                        new
                        {
                            HexCode = "#9B111E"
                        },
                        new
                        {
                            HexCode = "#89AC76"
                        },
                        new
                        {
                            HexCode = "#F3A505"
                        },
                        new
                        {
                            HexCode = "#5D9B9B"
                        },
                        new
                        {
                            HexCode = "#4C9141"
                        },
                        new
                        {
                            HexCode = "#B44C43"
                        },
                        new
                        {
                            HexCode = "#3E5F8A"
                        },
                        new
                        {
                            HexCode = "#F80000"
                        },
                        new
                        {
                            HexCode = "#8B8C7A"
                        });
                });

            modelBuilder.Entity("PaletteStudioApi.Models.ColourGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("BackgroundColourHexCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PaletteId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BackgroundColourHexCode");

                    b.HasIndex("PaletteId");

                    b.ToTable("ColourGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BackgroundColourHexCode = "#FFFFFF",
                            PaletteId = 1
                        },
                        new
                        {
                            Id = 2,
                            BackgroundColourHexCode = "#F3A505",
                            PaletteId = 1
                        },
                        new
                        {
                            Id = 3,
                            BackgroundColourHexCode = "#F80000",
                            PaletteId = 2
                        },
                        new
                        {
                            Id = 4,
                            BackgroundColourHexCode = "#000000",
                            PaletteId = 3
                        },
                        new
                        {
                            Id = 5,
                            BackgroundColourHexCode = "#8B8C7A",
                            PaletteId = 3
                        });
                });

            modelBuilder.Entity("PaletteStudioApi.Models.ForegroundColour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ColourGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColourHexCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ColourGroupId");

                    b.HasIndex("ColourHexCode");

                    b.ToTable("ForegroundColours");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColourGroupId = 1,
                            ColourHexCode = "#9B111E"
                        },
                        new
                        {
                            Id = 2,
                            ColourGroupId = 1,
                            ColourHexCode = "#F80000"
                        },
                        new
                        {
                            Id = 3,
                            ColourGroupId = 1,
                            ColourHexCode = "#8B8C7A"
                        },
                        new
                        {
                            Id = 4,
                            ColourGroupId = 1,
                            ColourHexCode = "#4C9141"
                        },
                        new
                        {
                            Id = 5,
                            ColourGroupId = 3,
                            ColourHexCode = "#B44C43"
                        },
                        new
                        {
                            Id = 6,
                            ColourGroupId = 3,
                            ColourHexCode = "#000000"
                        },
                        new
                        {
                            Id = 7,
                            ColourGroupId = 3,
                            ColourHexCode = "#F3A505"
                        },
                        new
                        {
                            Id = 8,
                            ColourGroupId = 4,
                            ColourHexCode = "#3E5F8A"
                        },
                        new
                        {
                            Id = 9,
                            ColourGroupId = 4,
                            ColourHexCode = "#F3A505"
                        },
                        new
                        {
                            Id = 10,
                            ColourGroupId = 5,
                            ColourHexCode = "#9B111E"
                        });
                });

            modelBuilder.Entity("PaletteStudioApi.Models.Palette", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Privacy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Palettes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Palette 1",
                            Privacy = "public",
                            UserId = "354492fe-30eb-4261-b5b1-4a291cb4001d"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Palette 2",
                            Privacy = "private",
                            UserId = "354492fe-30eb-4261-b5b1-4a291cb4001d"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Palette 3",
                            Privacy = "private",
                            UserId = "354492fe-30eb-4261-b5b1-4a291cb4001d"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PaletteStudioApi.Models.Authentication.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PaletteStudioApi.Models.Authentication.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PaletteStudioApi.Models.Authentication.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PaletteStudioApi.Models.Authentication.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PaletteStudioApi.Models.ColourGroup", b =>
                {
                    b.HasOne("PaletteStudioApi.Models.Colour", "BackgroundColour")
                        .WithMany("ColourGroups")
                        .HasForeignKey("BackgroundColourHexCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PaletteStudioApi.Models.Palette", "Palette")
                        .WithMany("ColourGroups")
                        .HasForeignKey("PaletteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BackgroundColour");

                    b.Navigation("Palette");
                });

            modelBuilder.Entity("PaletteStudioApi.Models.ForegroundColour", b =>
                {
                    b.HasOne("PaletteStudioApi.Models.ColourGroup", "ColourGroup")
                        .WithMany("ForegroundColours")
                        .HasForeignKey("ColourGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PaletteStudioApi.Models.Colour", "Colour")
                        .WithMany("ForegroundColours")
                        .HasForeignKey("ColourHexCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Colour");

                    b.Navigation("ColourGroup");
                });

            modelBuilder.Entity("PaletteStudioApi.Models.Palette", b =>
                {
                    b.HasOne("PaletteStudioApi.Models.Authentication.User", "User")
                        .WithMany("Palettes")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PaletteStudioApi.Models.Authentication.User", b =>
                {
                    b.Navigation("Palettes");
                });

            modelBuilder.Entity("PaletteStudioApi.Models.Colour", b =>
                {
                    b.Navigation("ColourGroups");

                    b.Navigation("ForegroundColours");
                });

            modelBuilder.Entity("PaletteStudioApi.Models.ColourGroup", b =>
                {
                    b.Navigation("ForegroundColours");
                });

            modelBuilder.Entity("PaletteStudioApi.Models.Palette", b =>
                {
                    b.Navigation("ColourGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
